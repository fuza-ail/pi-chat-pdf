
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id      String  @id @default(uuid()) @db.Uuid
  clerkId String  @unique
  email   String  @unique
  name    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  chats     Chat[]
  messages  Message[]


  @@map("users")
}


model Chat {
  id        String   @id @default(uuid()) @db.Uuid
  fileName     String 
  fileSize     Int
  mimeType     String
  fileUrl      String   
  uploadedAt   DateTime @default(now())

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  messages Message[]

  @@map("chats")
}

model Message {
  id        String      @id @default(uuid()) @db.Uuid
  content   String
  role      MessageRole
  // Optional: Store which document chunks were used to generate this response
  // This helps with citations, debugging, and showing sources to users
  retrievedContext Json? // Array of document IDs and relevance scores used for RAG
  createdAt DateTime    @default(now())

  chatId String @db.Uuid
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}

enum MessageRole {
  USER
  SYSTEM
}
